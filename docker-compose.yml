services:
  # App
  app:
    build:
      context: .
      dockerfile: build/docker/app/Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    tty: true
    environment:
      TZ: ${APP_TZ}
    networks:
      - go-auth

  # Nginx
  # TODO: need to use tls
  nginx:
    image: nginx:alpine
    container_name: nginx_load_balancer.${APP_NAME}
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./build/docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./build/certs/nginx/go-auth.crt:/etc/nginx/ssl/go-auth.crt
      - ./build/certs/nginx/go-auth.key:/etc/nginx/ssl/go-auth.key
    networks:
      - go-auth
    depends_on:
      - app

  # Postgres
  postgres:
    image: postgres:alpine
    container_name: postgres.${APP_NAME}
    restart: unless-stopped
    ports:
      - ${DB_PORT:-5432}:5432
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      TZ: ${APP_TZ}
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - go-auth
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pg-data:
    external: true

# Networks
networks:
  go-auth:
    driver: bridge